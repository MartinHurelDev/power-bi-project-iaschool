if(!exists('population')) population <<- read_csv('data_fao/population.csv')
}
clean_data <- function(){
population <<- population %>% mutate(population_value = Value*strtoi(gsub("[^0-9.]","", Unit))/1000000000)
}
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
odbcQuery(con, 'CREATE TABLE IF NOT EXISTS fao')
return(con)
}
dataFrameToTable <- function(con,TableName,data,replace=FALSE){
if (!dbExistsTable(con, TableName) || (replace==TRUE) ){
dbWriteTable(con, name = TableName, value = data, row.names = FALSE)
}
}
insertDatabase <<- function(){
con <<- dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataFrameToTable(con,'animal',animal)
dataFrameToTable(con,'cereals',cereals)
dataFrameToTable(con,'population',population)
dataFrameToTable(con,'undernourished',population)
dataFrameToTable(con,'vegetal',vegetal)
}
start_prog <<- function(){
importData()
clean_data()
insertDatabase()
}
stop_connection <<- function(){
all_cons <- dbListConnections(MySQL())
for(con in all_cons)
dbDisconnect(con)
}
shiny::runApp('IA Scool/projets/FAO/FAO')
con <<- dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
user=usr, #root
password=pwd,
Port = port) #3306
odbcQuery(con_tmp, 'CREATE TABLE IF NOT EXISTS fao')
# con <- dbConnect(MySQL(),
#                  Driver = driver,# MySQL
#                  host = server, #localhost
#                  dbname = database, # fao
#                  user=usr, #root
#                  password=pwd,
#                  Port = port) #3306
#
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
library(dplyr)
library(readr)
library(odbc)
library(RMySQL)
library(RODBC)
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
user=usr, #root
password=pwd,
Port = port) #3306
#odbcQuery(con_tmp, 'CREATE TABLE IF NOT EXISTS fao')
# con <- dbConnect(MySQL(),
#                  Driver = driver,# MySQL
#                  host = server, #localhost
#                  dbname = database, # fao
#                  user=usr, #root
#                  password=pwd,
#                  Port = port) #3306
#
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
user=usr, #root
password=pwd,
Port = port) #3306
odbcQuery(con_tmp, 'CREATE TABLE IF NOT EXISTS fao')
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
user=usr, #root
password=pwd,
Port = port) #3306
sqlQuery(con_tmp, 'CREATE TABLE IF NOT EXISTS fao')
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
user=usr, #root
password=pwd,
Port = port) #3306
RODBC::sqlQuery(con_tmp, 'CREATE TABLE IF NOT EXISTS fao')
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
user=usr, #root
password=pwd,
Port = port) #3306
RODBC::dbGetQuery(con_tmp, 'CREATE TABLE IF NOT EXISTS fao')
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
user=usr, #root
password=pwd,
Port = port) #3306
dbGetQuery(con_tmp, 'CREATE TABLE IF NOT EXISTS fao')
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
user=usr, #root
password=pwd,
Port = port) #3306
dbGetQuery(con_tmp, 'SELECT mysql ; CREATE TABLE IF NOT EXISTS fao')
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = 'mysql',
user=usr, #root
password=pwd,
Port = port) #3306
dbGetQuery(con_tmp, 'CREATE TABLE IF NOT EXISTS fao')
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = 'mysql',
user=usr, #root
password=pwd,
Port = port) #3306
dbGetQuery(con_tmp, 'CREATE DATABASE IF NOT EXISTS fao')
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
return(con)
}
dataBaseConnect("MySQL","localhost","fao","root","",3306)
runApp('IA Scool/projets/FAO/FAO')
runApp('IA Scool/projets/FAO/FAO')
runApp('IA Scool/projets/FAO/FAO')
runApp('IA Scool/projets/FAO/FAO')
runApp('IA Scool/projets/FAO/FAO')
test2 <- population %>% select(Area) %>% distinct()
test <- population %>% subset(`Area Code` != 351 )
View(test)
View(test2)
test <- population %>% subset(`Area Code` = 351 )
View(test)
test <- population %>% subset(`Area Code` == 351 )
View(test)
View(animal)
View(animal)
View(vegetal)
View(vegetal)
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal,vegetal)
test %>% dim()
171135 + 599681
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
View(test)
library(dplyr)
library(readr)
library(odbc)
library(RMySQL)
library(RODBC)
importData <<- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# importing dataFrames
if(!exists('vegetal')) vegetal <<- read_csv('data_fao/vegetal_product.csv')
if(!exists('animal')) animal <<- read_csv('data_fao/animal_product.csv')
if(!exists('undernourished')) undernourished <- read_csv('data_fao/undernourished.csv')
if(!exists('cereals')) cereals <<- read_csv('data_fao/cereals_product.csv')
if(!exists('population')) population <<- read_csv('data_fao/population.csv')
}
clean_data <- function(){
population <<- population %>% mutate(population_value = Value*strtoi(gsub("[^0-9.]","", Unit))/1000000000)
dispo_alim <<- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
}
dataBaseConnect <<- function(driver,server,database,usr,pwd,port){
con_tmp <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = 'mysql',
user=usr, #root
password=pwd,
Port = port) #3306
dbGetQuery(con_tmp, 'CREATE DATABASE IF NOT EXISTS fao')
con <- dbConnect(MySQL(),
Driver = driver,# MySQL
host = server, #localhost
dbname = database, # fao
user=usr, #root
password=pwd,
Port = port) #3306
return(con)
}
dataFrameToTable <- function(con,TableName,data,replace=FALSE){
if (!dbExistsTable(con, TableName) || (replace==TRUE) ){
dbWriteTable(con, name = TableName, value = data, row.names = FALSE)
}
}
insertDatabase <<- function(){
con <<- dataBaseConnect("MySQL","localhost","fao","root","",3306)
dataFrameToTable(con,'animal',animal)
dataFrameToTable(con,'cereals',cereals)
dataFrameToTable(con,'population',population)
dataFrameToTable(con,'undernourished',population)
dataFrameToTable(con,'vegetal',vegetal)
}
start_prog <<- function(){
importData()
clean_data()
insertDatabase()
}
stop_connection <<- function(){
all_cons <- dbListConnections(MySQL())
for(con in all_cons)
dbDisconnect(con)
}
shiny::runApp('IA Scool/projets/FAO/FAO')
test %>% select(Element) %>% distinct()
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
test2 <- test %>% select(Item code)
test %>% dim()
#dispo_alim <-
View(test2)
View(test2)
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
test2 <- test %>% select(`Item Code`)
test %>% dim()
#dispo_alim <-
View(test)
View(test)
View(test2)
View(test2)
View(test2)
View(test2)
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
test2 <- test %>% select(`Item Code`,Item,`Area Code`,Area,Value,Year,origin)
test %>% dim()
#dispo_alim <-
View(test2)
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
test2 <- test %>% select(`Item Code`,Item,`Area Code`,Area,Value,Year,Element,origin)
test %>% dim()
#dispo_alim <-
View(vegetal)
View(test2)
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
test2 <- test %>% select(`Item Code`,Item,`Area Code`,Area,Value,Year,Element,origin) %>% filter(Element == 'feed')
test %>% dim()
#dispo_alim <-
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
test2 <- test %>% select(`Item Code`,Item,`Area Code`,Area,Value,Year,Element,origin) %>% filter(Element == 'seed')
test %>% dim()
#dispo_alim <-
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
test2 <- test %>% select(`Item Code`,Item,`Area Code`,Area,Value,Year,Element,origin) %>% filter(Element != 'seed')
test %>% dim()
#dispo_alim <-
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
test2 <- test %>% select(`Item Code`,Item,`Area Code`,Area,Value,Year,Element,origin)
test %>% dim()
#dispo_alim <-
View(test2)
test2 %>% select(Element) %>% distinct()
library(shiny)
library("ggplot2")
source('dataManipulation.R')
source('global.r')
library(dplyr)
library(readr)
library(odbc)
library(RMySQL)
library(RODBC)
test2 %>% select(Element) %>% distinct()
animal %>% dim()
vegetal %>% dim()
test <- rbind(animal %>% mutate(origin = 'animal'),vegetal %>% mutate(origin = 'vegetal'))
test2 <- test %>% select(`Item Code`,Item,`Area Code`,Area,Value,Year,Element,origin) %>% filter(Element %in% c(
'Food supply quantity (kg/capita/yr)','Food supply (kcal/capita/day)','Protein supply quantity (g/capita/day)',
'Fat supply quantity (g/capita/day)'
))
test %>% dim()
#dispo_alim <-
View(test2)
test2 %>% group_by(`Item Code`)
test2 %>% group_by(`Item Code`,origin)
test2 %>% group_by(`Item Code`,Item,`Area Code`,Area,Value,Year,origin)
group_by(`Item Code`,Item,`Area Code`,Area,Year,origin)
test2 %>% group_by(`Item Code`,Item,`Area Code`,Area,Year,origin)
library(tidyverse)
test2 %>% spread(key = Element,value = Value)
test2 %>% spread(key = Element,value = Value)
runApp('IA Scool/projets/FAO/FAO')
View(dispo_alim)
View(dispo_alim)
View(population)
View(population)
View(animal)
View(animal)
View(cereals)
cereals %>% mutate(is_cereal = ifelse(test = `Item Code` %in% c(2511,2805,2513,2514,2517,2520,2515,2516,2518),
yes = TRUE,
FALSE) )
cereals %>% mutate(is_cereal = ifelse(test = `Item Code` %in% c(2511,2805,2513,2514,2517,2520,2515,2516,2518),
yes = TRUE,
FALSE) )
test3 <- cereals %>% mutate(is_cereal = ifelse(test = `Item Code` %in% c(2511,2805,2513,2514,2517,2520,2515,2516,2518),
yes = TRUE,
FALSE) )
View(test3)
test3 <- cereals %>% mutate(is_cereal = ifelse(test = `Item Code` %in% c(2511,2805,2513,2514,2517,2520,2515,2516,2518),
yes = TRUE,
no = FALSE) )
test3 <- cereals %>% mutate(is_cereal = ifelse(test = `Item Code` %in% c(2511,2805,2513,2514,2517,2520,2515,2516,2518),
yes = TRUE) )
test3 <- cereals %>% mutate(is_cereal = ifelse(test = `Item Code` %in% c(2511,2805,2513,2514,2517,2520,2515,2516,2518),
yes = TRUE) )
View(cereals)
View(vegetal)
runApp('IA Scool/projets/FAO/FAO')
runApp('IA Scool/projets/FAO/FAO')
View(cereals_list)
View(vegetal)
vegetal %>% select(Element) %>% distinct()
shiny::runApp('IA Scool/projets/FAO/FAO')
runApp()
runApp('IA Scool/projets/FAO/FAO')
View(dispo_alim)
View(dispo_alim)
View(population)
disp_alim_per_item <- dispo_alim %>% inner_join(population,by=c("year","Area Code"))
disp_alim_per_item <- dispo_alim %>% inner_join(population,by=c("Year","Area Code"))
View(disp_alim_per_item)
disp_alim_per_item <- dispo_alim %>% inner_join(population %>% select(Year,Area Code,Value) ,by=c("Year","Area Code"))%>%select()
e protéines
disp_alim_per_item <- dispo_alim %>% inner_join(population %>% select('Year','Area Code','Value') ,by=c("Year","Area Code"))%>%select()
View(disp_alim_per_item)
e protéines
disp_alim_per_item <- dispo_alim %>% inner_join(population %>% select(c("Year","Area Code","Value")) ,by=c("Year","Area Code"))%>%select()
disp_alim_per_item <- dispo_alim %>% inner_join(population %>% select(c("Year","Area Code","Value")) ,by=c("Year","Area Code"))
View(disp_alim_per_item)
shiny::runApp('IA Scool/projets/FAO/FAO')
runApp('IA Scool/projets/FAO/FAO')
View(disp_alim_per_item)
View(disp_alim_per_item)
shiny::runApp('IA Scool/projets/FAO/FAO')
View(dataBaseConnect)
runApp('IA Scool/projets/FAO/FAO')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(populationMondiale)
View(populationMondiale)
runApp()
evo_poppulation <- population_table %>% group_by(Year) %>% summarise(n = sum(Value))
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
population_table_tmp <- population[!population$`Area Code` %in% c(41,96,214,128),]
population_table <<- population_table_tmp %>% select(Area,`Area Code`,Value,Year)
population_table$Value <- population_table$Value*1000
View(populationMondiale2)
View(populationMondiale2)
View(populationMondiale2)
View(populationMondiale2)
population_table_tmp <- population[!population$`Area Code` %in% c(41,96,214,128),]
population_table <<- population_table_tmp %>% select(Area,`Area Code`,Value,Year)
population_table$Value <- population_table$Value*1000
population_table
population_table
population_table$Value
runApp()
pivoted_table
pivoted_table <- tidyr::pivot_wider(products,id_cols=c("Area Code","Area","Year","Item Code","Item","origin"),names_from= "Element",values_from = Value)
products <- All_products[,!names(All_products) %in% c("Domain Code","Domain")]
pivoted_table <- tidyr::pivot_wider(products,id_cols=c("Area Code","Area","Year","Item Code","Item","origin"),names_from= "Element",values_from = Value)
pivoted_table
products <- All_products[,!names(All_products) %in% c("Domain Code","Domain")]
pivoted_table <- tidyr::pivot_wider(products,id_cols=c("Area Code","Area","Year","Item Code","Item","origin"),names_from= "Element",values_from = Value)
cereals <- cereals[,!names(cereals) %in% c("Domain Code","Domain")]
codes <- cereals %>% distinct(`Item Code`)
pivoted_table <- pivoted_table %>% mutate(is_cereal = `Item Code` %in% pull(codes))
Cereal_consumption <- pivoted_table %>% filter(is_cereal == TRUE)
feed_sum <- sum(Cereal_consumption$Feed,na.rm = TRUE)
feed_sum
Cereal_consumption
source('C:/Users/Roat Kim/Desktop/M1 Data Science/Projet/Projet FAO/power-bi-project-iaschool/dataManipulation.R', echo=TRUE)
